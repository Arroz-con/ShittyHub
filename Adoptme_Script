local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local Bypass = require(game.ReplicatedStorage:WaitForChild("Fsys")).load
local inventoryDB = Bypass("InventoryDB")
local Workspace = game:GetService("Workspace")
local Remote = Bypass("RouterClient").get("HousingAPI/ActivateFurniture")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")

local TradeButtons = Player.PlayerGui.DialogApp.Dialog.NormalDialog.Buttons

local getupvalue = getupvalue or debug.getupvalue
local getconstant = getconstant or debug.getconstant
local getconstants = getconstants or debug.getconstants
local getgc = getgc or get_gc_objects or debug.getgc
local getreg = getreg or getregistry or debug.getregistry
local get_thread_context = get_thread_context or getthreadcontext or getidentity or syn.get_thread_identity
local get_thread_identity = get_thread_context
local set_thread_context = set_thread_context or setthreadcontext or setidentity or syn.set_thread_identity
local set_thread_identity = set_thread_context

getgenv().auto_accept_trade = true
getgenv().auto_trade_all_pets = true
getgenv().auto_trade_fullgrown_neon_and_mega = true
getgenv().auto_trade_custom = true
getgenv().auto_trade_semi_auto = true
getgenv().auto_trade_lowtier_pets = true
getgenv().auto_trade_Legendary = true
getgenv().auto_trade_custom_gifts = true

for i, v in pairs(getupvalue(require(ReplicatedStorage.Fsys).load("RouterClient").init, 4)) do
	v.Name = i
end

Player.Idled:Connect(function()
	VirtualUser:ClickButton2(Vector2.new())
end)


for i,v in pairs(getconnections(Player.Idled)) do
	v:Disable()
end

local pets_legendary = {}
local pets_ultrarare = {}
local pets_rare = {}
local pets_uncommon = {}
local pets_common = {}
local pets_eggs = {}

for u, pets in pairs(inventoryDB.pets) do
	if pets.rarity == "legendary" and not pets.is_egg then
		table.insert(pets_legendary, u)
	elseif pets.rarity == "ultra_rare" and not pets.is_egg then
		table.insert(pets_ultrarare, u)
	elseif pets.rarity == "rare" and not pets.is_egg then
		table.insert(pets_rare, u)
	elseif pets.rarity == "uncommon" and not pets.is_egg then
		table.insert(pets_uncommon, u)
	elseif pets.rarity == "common" and not pets.is_egg then
		table.insert(pets_common, u)
	elseif pets.is_egg then
		table.insert(pets_eggs, u)
	end
end

local Pets_commonto_ultrarare = {}
for i, pettable in pairs({pets_common, pets_uncommon, pets_rare, pets_ultrarare}) do
	for j, petlist in pairs(pettable) do
		table.insert(Pets_commonto_ultrarare, petlist)
	end
end

local pets_legendary_to_common = {}
for i, pettable in pairs({pets_legendary, pets_ultrarare, pets_rare, pets_uncommon, pets_common}) do
	for j, petlist in pairs(pettable) do
		table.insert(pets_legendary_to_common, petlist)
	end
end



local function FireButtons()
	for i, v in pairs(Player.PlayerGui.DialogApp:GetDescendants()) do
		if v.Name == "TextLabel" then
			if  v.Text == "Accept" or v.Text == "Okay" or v.Text == "Next" or v.Text == "I understand" then
				firesignal(v.Parent.Parent.MouseButton1Click)
			end
		end
	end
end


function autoAcceptTrade()
	task.spawn(function()
		while task.wait(1) do
			if not auto_accept_trade then break end
			pcall(function()
				FireButtons()
				ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
				ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
				for i,v in pairs(getconnections(Player.PlayerGui.DialogApp.Dialog.NormalDialog.Buttons.ButtonTemplate)) do
					v.Function()
					v:Fire()
				end
			end)
		end
	end)
end

function autoTradeAllPets()
	task.spawn(function()
		while task.wait(0.5) do
			if not getgenv().auto_trade_all_pets then break end
			pcall(function()
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(selectedPlayer)
				end
				FireButtons()
			end)
		end
	end)

	task.spawn(function()
		local petCounter = 0
		while task.wait(0.5) do
			if not getgenv().auto_trade_all_pets then break end
			pcall(function()
				for i, pet in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
					ReplicatedStorage.API["TradeAPI/AddItemToOffer"]:FireServer(pet.unique)
					petCounter = petCounter + 1
					if petCounter >= 18 then
						break
					end
				end
				ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
				ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
				petCounter = 0
			end)
		end
	end)
end

function autoTradeLegendary()
	task.spawn(function()
		while task.wait(0.5) do
			if not getgenv().auto_trade_Legendary then break end
			pcall(function()
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(selectedPlayer)
				end
				FireButtons()
			end)
		end
	end)

	task.spawn(function()
		local petCounter = 0
		while task.wait(0.5) do
			if not getgenv().auto_trade_Legendary then break end
			pcall(function()
				for _, v in pairs(pets_legendary) do
					for i, pet in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
						if v == pet.id then
							ReplicatedStorage.API["TradeAPI/AddItemToOffer"]:FireServer(pet.unique)
							petCounter = petCounter + 1
							if petCounter >= 9 then
								break 
							end
						end
					end
				end
				ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
				ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
				petCounter = 0
			end)
		end
	end)
end




function autoTradeFullgrownNeonandMega()
	task.spawn(function()
		while task.wait(0.5) do
			if not getgenv().auto_trade_fullgrown_neon_and_mega then break end
			pcall(function()
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(selectedPlayer)
				end
				FireButtons()
			end)
		end
	end)

	task.spawn(function()
		local petCounter = 0
		while task.wait(0.5) do
			if not getgenv().auto_trade_fullgrown_neon_and_mega then break end
			pcall(function()
				for i, pet in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
					if pet.properties.age == 6 and pet.properties.neon or pet.properties.mega_neon then
						ReplicatedStorage.API["TradeAPI/AddItemToOffer"]:FireServer(pet.unique)
						petCounter = petCounter + 1
						if petCounter >= 9 then
							break 
						end
					end
				end
				ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
				ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
				petCounter = 0
			end)
		end
	end)
end


function autoTradeLowTierPets()
	task.spawn(function()
		while task.wait(0.5) do
			if not getgenv().auto_trade_lowtier_pets then break end
			pcall(function()
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(selectedPlayer)
				end
				FireButtons()
			end)
		end
	end)

	task.spawn(function()
		local petCounter = 0
		while task.wait(0.5) do
			if not getgenv().auto_trade_lowtier_pets then break end
			pcall(function()
				for q, pet in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
					for w, petsDB_lowtierpets in pairs(Pets_commonto_ultrarare) do
						if pet.id == petsDB_lowtierpets and pet.properties.age <=4 and not pet.properties.neon and not pet.properties.mega_neon then
							ReplicatedStorage.API["TradeAPI/AddItemToOffer"]:FireServer(pet.unique)
							petCounter = petCounter + 1
							if petCounter >= 9 then
								break
							end
						end
					end
				end
				ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
				ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
				petCounter = 0
			end)
		end
	end)
end


function autoTradeCustom()
	task.spawn(function()
		while task.wait(0.5) do
			if not getgenv().auto_trade_custom then break end
			pcall(function()
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(selectedPlayer)
				end
				FireButtons()
			end)
		end
	end)

	task.spawn(function()
		local petCounter = 0
		while task.wait(0.5) do
			if not getgenv().auto_trade_custom then break end
			pcall(function()
				for i, pet in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
					if pet.id == selectedPet then
						ReplicatedStorage.API["TradeAPI/AddItemToOffer"]:FireServer(pet.unique)
						petCounter = petCounter + 1
						if petCounter >= 9 then
							break 
						end
					end
				end
				ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
				task.wait(1)
				ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
				petCounter = 0
			end)
		end
	end)
end



function autoTradeSemiAuto()
	task.spawn(function()
		while task.wait(0.5) do
			if not getgenv().auto_trade_semi_auto then break end
			pcall(function()
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(selectedPlayer)
				end
				FireButtons()
			end)
		end
	end)

	task.spawn(function()
		local petCounter = 0
		while task.wait(0.5) do
			if not getgenv().auto_trade_semi_auto then break end
			pcall(function()
				for i, pet in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
					if pet.id then
			--          ReplicatedStorage.API["TradeAPI/AddItemToOffer"]:FireServer(pet.unique)
						petCounter = petCounter + 1 
						if petCounter >= 50 then
							break 
						end
					end
				end
		--      ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
				ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
				petCounter = 0
			end)
		end
	end)
end


function autoTradeCustomGifts()
	task.spawn(function()
		while task.wait(0.5) do
			if not getgenv().auto_trade_custom_gifts then break end
			pcall(function()
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(selectedPlayer)
				end
				FireButtons()
			end)
		end
	end)

	task.spawn(function()
		local petCounter = 0
		while task.wait(1) do
			if not getgenv().auto_trade_custom_gifts then break end
			pcall(function()
				for i, gift in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.gifts) do
					if gift.id == selectedGift then
					  ReplicatedStorage.API["TradeAPI/AddItemToOffer"]:FireServer(gift.unique)
						petCounter = petCounter + 1 
						if petCounter >= 9 then
							break 
						end
					end
				end
				petCounter = 0
			end)
		end
	end)
end

--// Temporarily Gorilla Event
local function ExchangeGorilla(items, Gorilla)
	local Counter = 0
	for i, v in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.toys) do
		if v.id == items then
			Counter = Counter + 1
		end
	end

	if Counter == 0 then
		return
	end

	local HowManyToDo = math.abs(Counter / 3)

	for i = 1, HowManyToDo do
		for i, v in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
			if v.id == "gorilla_fair_2023_gorilla" then
				local PetUnique = v.unique
				ReplicatedStorage.API["EventAPI/TransformGorilla"]:InvokeServer(PetUnique, Gorilla)
				task.wait(1)
				break
			end
		end
	end
end


-----------          UI  Functions           ------------------

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Adopt me", HidePremium = false, SaveConfig = true, ConfigFolder = "Bakane_Adoptme", IntroText = "Hello World"})




--################ Auto Trade Tab #################################################################################
local Auto = Window:MakeTab({
	Name = "Auto Trade",
	Icon = "rbxassetid://259820115",
	PremiumOnly = false
})

Auto:AddSection({
	Name = "only enable Auto Accept trade on alt getting the items"
})

Auto:AddToggle({
	Name = "Auto Accept Trade ",
	Callback = function(value)
		getgenv().auto_accept_trade = value
		autoAcceptTrade()
	end    
})


local playerDropdown = Auto:AddDropdown({
	Name = "Select a player",
	Callback = function(selectedPlayer_input)
		selectedPlayer = Players[selectedPlayer_input]
	end
})

Auto:AddButton({
	Name = "Refresh Players",
	Callback = function()
		local playerOptions = {}
		for i, p in pairs(game.Players:GetPlayers()) do
			if p ~= Player then
				table.insert(playerOptions, p.Name)
				table.sort(playerOptions)
			end
		end
		playerDropdown:Refresh(playerOptions, true)
	end
})



Auto:AddSection({
	Name = "vvv Only turn 1 of them on at a time vvv"
})


Auto:AddToggle({
	Name = "Auto Trade All Pets",
	Callback = function(value)
		getgenv().auto_trade_all_pets = value
		autoTradeAllPets()
	end    
})

Auto:AddToggle({
	Name = "Auto Trade Only Legendary's",
	Callback = function(value)
		getgenv().auto_trade_Legendary = value
		autoTradeLegendary()
	end    
})

Auto:AddToggle({
	Name = "Auto Trade Fullgrown Neons and Megas",
	Callback = function(value)
		getgenv().auto_trade_fullgrown_neon_and_mega = value
		autoTradeFullgrownNeonandMega()
	end    
})

Auto:AddToggle({
	Name = "Auto Trade common to ultra-rare and newborn to teen ",
	Callback = function(value)
		getgenv().auto_trade_lowtier_pets = value
		autoTradeLowTierPets()
	end    
})

Auto:AddToggle({
	Name = "Semi-Auto Trade (manually choose items)",
	Callback = function(value)
		getgenv().auto_trade_semi_auto = value
		autoTradeSemiAuto()
	end
})


Auto:AddSection({
	Name = "Send Custom Pet, sends ALL ages of selected pet"
})

local PetsDropdown = Auto:AddDropdown({
	Name = "Select a Pet",
	Callback = function(selectedPet_input)
		selectedPet = selectedPet_input
	end
})

Auto:AddButton({
	Name = "Refresh Pet List",
	Callback = function()
		local petOptions = {}
		local petTable = {}
		local addedNames = {}
		for i, p in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
			if p and not addedNames[p.id] then
				if not petTable[p.id] then
					petTable[p.id] = {}
				end
				table.insert(petTable[p.id], p.id)
				addedNames[p.id] = true
			end
		end
		for name, ids in pairs(petTable) do
			table.insert(petOptions, name)
			table.sort(petOptions)
		end
		PetsDropdown:Refresh(petOptions, true)
	end
})


Auto:AddToggle({
	Name = "Auto Trade Custom Pet",
	Callback = function(value)
		getgenv().auto_trade_custom = value
		autoTradeCustom()
	end    
})
--// Buying Tabs //--

local Buy = Window:MakeTab({
	Name = "Auto Buy",
	Icon = "rbxassetid://259820115",
	PremiumOnly = false
})

Buy:AddTextbox({
	Name = "Enter How many to buy",
	TextDisappear = false,
	Callback = function(value)
		howmany = value
	end  
})

Buy:AddButton({
	Name = "Hare",
	Callback = function()
		for i = 1, howmany do
			ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("pets", "springfest_2023_hare", {})
			task.wait(.1)
		end
	end
})

Buy:AddButton({
	Name = "Wood Pigeon",
	Callback = function()
		for i = 1, howmany do
			ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("pets", "springfest_2023_wood_pigeon", {})
			task.wait(.1)
		end
	end
})

Buy:AddButton({
	Name = "Southeast Asia Egg",
	Callback = function()
		for i = 1, howmany do
			ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("pets", "seasia_2023_egg", {})
			task.wait(.1)
		end
	end
})


Buy:AddButton({
	Name = "Auto buy + open + exchange gorilla",
	Callback = function()
		local NameID = "gorilla_fair_2023_standard_box"
		local Counter = 0
		for i = 1, howmany do
			ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("gifts", "gorilla_fair_2023_standard_box", {})
			task.wait(.1)
			for i, v in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.gifts) do
				if v["id"] == NameID then
					local GiftID = v["id"]
					local GiftUnique = v["unique"]
					game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("LootBoxAPI/ExchangeItemForReward"):InvokeServer(GiftID, GiftUnique)
					task.wait(.1)
					Counter = Counter + 1
					if Counter == howmany then
						break
					end
				end
			end
		end
		ExchangeGorilla("gorilla_fair_2023_chef_item", "gorilla_fair_2023_chef_gorilla")
		ExchangeGorilla("gorilla_fair_2023_astronaut_item", "gorilla_fair_2023_astronaut_gorilla")
		ExchangeGorilla("gorilla_fair_2023_karate_item", "gorilla_fair_2023_karate_gorilla")
		ExchangeGorilla("gorilla_fair_2023_emperor_item", "gorilla_fair_2023_emperor_gorilla")
	end
})

OrionLib:Init()
