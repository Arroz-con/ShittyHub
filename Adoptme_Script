-----------------------------------------------------------------------------------------------
--[[ Services ]]--
-----------------------------------------------------------------------------------------------
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VI = game:GetService("VirtualInputManager")
local UserGameSettings = UserSettings():GetService("UserGameSettings")
-- local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local CoreGui = game:GetService("CoreGui")
-----------------------------------------------------------------------------------------------
--[[ Modules ]]--
-----------------------------------------------------------------------------------------------
local Bypass = require(ReplicatedStorage:WaitForChild("Fsys", 600)).load
-- local inventoryDB = Bypass("InventoryDB")
-- local Remote = Bypass("RouterClient").get("HousingAPI/ActivateFurniture")
local ClaimRemote = Bypass("RouterClient").get("QuestAPI/ClaimQuest")
local RerollRemote = Bypass("RouterClient").get("QuestAPI/RerollQuest")

local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/Rayfield/main/source"))()

local Clipboard = loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/ClipboardPetsInfo.lua"))()
local Fusion = loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/Fusion.lua"))()
local GetInventory = loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/GetInventory.lua"))()
local Trade = loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/Trade.lua"))()
local CrazySea = loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/CrazySea2024.luau"))()
local Teleport = loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/Teleport.lua"))()


-----------------------------------------------------------------------------------------------
--[[ Private Variables ]]--
-----------------------------------------------------------------------------------------------
local Player = Players.LocalPlayer

local NewsAppConnection
local PickColorConn
local WelcomeScreen
-- local DialogConnection
local RoleChooserDialogConnection
local RobuxProductDialogConnection
local banMessageConnection
local DailyClaimConnection
-- local ChatConnection
local CharConn

local DailyBoolean = true
local NewTaskBool = true
local NewClaimBool = true
local isMainMap = false
local stopDoingTasks = false
local guiCooldown = false
local tutorialDebonce = false
local stopEquip = false
local discordCooldown = false

local Bed
local Shower
local Piano
local normalLure
local beachlog

local baitId
local selectedPlayer
local selectedItem

getgenv().auto_accept_trade = true
getgenv().auto_trade_all_pets = true
getgenv().auto_trade_fullgrown_neon_and_mega = true
getgenv().auto_trade_custom = true
getgenv().auto_trade_semi_auto = true
getgenv().auto_trade_lowtier_pets = true
getgenv().auto_farm = true
getgenv().auto_make_neon = true
getgenv().auto_trade_Legendary = true
getgenv().auto_trade_custom_gifts = true
getgenv().auto_trade_all_neons = true
getgenv().auto_trade_eggs = true
getgenv().auto_trade_all_inventory = true
getgenv().feedAgeUpPotionToggle = false

getgenv().PetCurrentlyFarming = ""

local Egg2Buy = SETTINGS.PET_TO_BUY
local Gift2Buy = "lunar_2024_special_lunar_new_year_gift_box"
local Pet2Buy = SETTINGS.PET_TO_BUY


local TestGui = Instance.new("ScreenGui")
local TextButton = Instance.new("TextButton")

local SelectedPet
local TradeAllInventory
local AllPetsToggle
local LegendaryToggle
local FullgrownToggle
local TradeAllMegas
local TradeAllNeons
local LowTierToggle
local GiftToggle
local ToyToggle
local FoodToggle

-----------------------------------------------------------------------------------------------
--[[ Tables  ]]--
-----------------------------------------------------------------------------------------------
local DailyRewardTable = {
    [9] = "reward_1", [30] = "reward_2", [90] = "reward_3",[140] = "reward_4",
    [180] = "reward_5", [210] = "reward_6", [230] = "reward_7", [280] = "reward_8",
    [300] = "reward_9", [320] = "reward_10", [360] = "reward_11", [400] = "reward_12",
    [460] = "reward_13", [500] = "reward_14", [550] = "reward_15", [600] = "reward_16",
    [660] = "reward_17",
}

local DailyRewardTable2 = {
    [9] = "reward_1", [65] = "reward_2", [120] = "reward_3", [180] = "reward_4",
	[225] = "reward_5", [280] = "reward_6", [340] = "reward_7", [400] = "reward_8",
    [450] = "reward_9", [520] = "reward_10", [600] = "reward_11", [660] = "reward_12",
}

local NeonTable = { ["neon_fusion"] = true, ["mega_neon_fusion"] = true }
local ClaimTable = {
	["hatch_three_eggs"] = { 3 },
	["fully_age_three_pets"] = { 3 },
	["make_two_trades"] = { 2 },
	["equip_two_accessories"] = { 2 },
	["buy_three_furniture_items_with_friends_coop_budget"] = { 3 },
	["buy_five_furniture_items"] = { 5 },
	["buy_fifteen_furniture_items"] = { 15 },
	["play_as_a_baby_for_twenty_five_minutes"] = { 1500 },
	["play_for_thirty_minutes"] = { 1800 },
	["sunshine_2024_playtime"] = { 2400 }
}

local petsTable = GetInventory:TabId("pets")
local giftsTable = GetInventory:TabId("gifts")
local toysTable = GetInventory:TabId("toys")
local foodTable = GetInventory:TabId("food")

local pets_legendary = {}
local pets_ultrarare = {}
local pets_rare = {}
local pets_uncommon = {}
local pets_common = {}
local pets_eggs = {}
local Pets_commonto_ultrarare = {}
local pets_legendary_to_common = {}

-----------------------------------------------------------------------------------------------
--[[ Private Functions ]]--
-----------------------------------------------------------------------------------------------
local function clickGuiButton(button: Instance, xOffset: number, yOffset: number)
	local xOffset = xOffset or 60
	local yOffset = yOffset or 60
	task.wait()
	VI:SendMouseButtonEvent(button.AbsolutePosition.X + xOffset, button.AbsolutePosition.Y + yOffset, 0, true, game, 1)
	task.wait()
	VI:SendMouseButtonEvent(button.AbsolutePosition.X + xOffset, button.AbsolutePosition.Y + yOffset, 0, false, game, 1)
	task.wait()
end

local function FireButton(PassOn, dialogFrame)
	task.wait() -- gives it time for button
	local dialogFrame = dialogFrame or "NormalDialog"
	for i, v in pairs(Player.PlayerGui.DialogApp.Dialog[dialogFrame].Buttons:GetDescendants()) do
		if v.Name == "TextLabel" then
			if v.Text == PassOn then
				clickGuiButton(v.Parent.Parent)
				-- firesignal(v.Parent.Parent.MouseButton1Click)
				break
			end
		end
	end
end

local function getTradeLicense()
	for i, v in Bypass("ClientData").get_data()[Player.Name].inventory.toys do
		if v.id == "trade_license" then
			return
		end
	end

	pcall(function()
		Bypass("RouterClient").get("SettingsAPI/SetBooleanFlag"):FireServer("has_talked_to_trade_quest_npc", true)
		task.wait()
		Bypass("RouterClient").get("TradeAPI/BeginQuiz"):FireServer()
		task.wait(1)
		for _, v in pairs(Bypass("ClientData").get("trade_license_quiz_manager")["quiz"]) do
			Bypass("RouterClient").get("TradeAPI/AnswerQuizQuestion"):FireServer(v["answer"])
		end
	end)
end

--// completes the starter tutorial
local function completeStarterTutorial()
	pcall(function()
		Bypass("LegacyTutorial").cancel_tutorial()
		task.wait()
		Bypass("TutorialClient").cancel()
		task.wait()
		ReplicatedStorage.API["LegacyTutorialAPI/EquipTutorialEgg"]:FireServer()
		task.wait()
		ReplicatedStorage.API["LegacyTutorialAPI/AddTutorialQuest"]:FireServer()
		task.wait()
		ReplicatedStorage.API["LegacyTutorialAPI/AddHungryAilmentToTutorialEgg"]:FireServer()
		task.wait()
		local function feedStartEgg(SandwichPassOn)
			local Foodid2
			for _, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.food) do
				if v.id == SandwichPassOn then
					Foodid2 = v.unique
					break
				end
			end

			ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(Foodid2, { ["use_sound_delay"] = true })
			task.wait(1)
			ReplicatedStorage.API["PetAPI/ConsumeFoodItem"]:FireServer(
				Foodid2,
				Bypass("ClientData").get("pet_char_wrappers")[1].pet_unique
			)
		end

		feedStartEgg("sandwich-default")
		Bypass("RouterClient").get("TeamAPI/ChooseTeam"):InvokeServer("Babies", { ["dont_send_back_home"] = true })
	end)
end

-- "basiccrib"  "stylishshower"  "modernshower"  "piano" "lures2023normallure"
local function findFurniture()
	for key, value in Bypass("ClientData").get_data()[Player.Name].house_interior.furniture do
		if value.id == "basiccrib" then
			Bed = key
		elseif value.id == "stylishshower" or value.id == "modernshower" then
			Shower = key
		elseif value.id == "piano" then
			Piano = key
		elseif value.id == "lures2023normallure" then
			normalLure = key
		elseif value.id == "beach_2024_log" then
			beachlog = key
		end
	end
end

--[[
local function buyPiano()
    local args = {
        [1] = {
            [1] = {
                ["kind"] = "piano",
                ["properties"] = {
                    ["cframe"] = CFrame.new(Vector3.new(13.7001953125, 0, -20.699951171875), Vector3.new(-8.742277657347586e-08, -0, -1))
                }
            }
        }
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))
    
end
--]]

local function buyCrib()
	local args = {
		[1] = {
			[1] = {
				["kind"] = "basiccrib",
				["properties"] = {
					["cframe"] = CFrame.new(
						Vector3.new(13.7001953125, 0, -20.699951171875),
						Vector3.new(-8.742277657347586e-08, -0, -1)
					),
				},
			},
		},
	}

	ReplicatedStorage:WaitForChild("API"):WaitForChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))
end

local function GrabDailyReward()
	local Daily = Bypass("ClientData").get("daily_login_manager")
	if Daily.prestige % 2 == 0 then
		for i, v in pairs(DailyRewardTable) do
			if i < Daily.stars or i == Daily.stars then
				if not Daily.claimed_star_rewards[v] then
					Bypass("RouterClient").get("DailyLoginAPI/ClaimStarReward"):InvokeServer(v)
				end
			end
		end
	else
		for i, v in pairs(DailyRewardTable2) do
			if i < Daily.stars or i == Daily.stars then
				if not Daily.claimed_star_rewards[v] then
					Bypass("RouterClient").get("DailyLoginAPI/ClaimStarReward"):InvokeServer(v)
				end
			end
		end
	end
end

---\\Auto taskboard Quest
local function QuestCount()
	local Count = 0
	for i, v in pairs(Bypass("ClientData").get("quest_manager")["quests_cached"]) do
		if
			v["entry_name"]:match("teleport")
			or v["entry_name"]:match("navigate")
			or v["entry_name"]:match("nav")
			or v["entry_name"]:match("gosh_2022_sick")
		then
			Count = Count + 0
		else
			Count = Count + 1
		end
	end
	return Count
end

local function ReRollCount()
	for i, v in pairs(Bypass("ClientData").get("quest_manager")["daily_quest_data"]) do
		if v == 1 or v == 0 then
			return v
		end
	end
end

local function NewTask()
	NewTaskBool = false
	for _, v in pairs(Bypass("ClientData").get("quest_manager")["quests_cached"]) do
		if v["entry_name"]:match("teleport") then
			task.wait()
		elseif v["entry_name"]:match("tutorial") then
			ClaimRemote:InvokeServer(v["unique_id"])
			task.wait()
		elseif v["entry_name"]:match("celestial_2024_small_open_gift") then
			-- open small gift
			ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("gifts", "smallgift", {})
			task.wait(1)
			for _, v in Bypass("ClientData").get_data()[Player.Name].inventory.gifts do
				if v["id"] == "smallgift" then
					Bypass("RouterClient").get("ShopAPI/OpenGift"):InvokeServer(v["unique"])
					break
				end
			end
			task.wait()
		else
			if QuestCount() == 1 then
				if NeonTable[v["entry_name"]] then
					ClaimRemote:InvokeServer(v["unique_id"])
					task.wait()
				elseif not NeonTable[v["entry_name"]] and ReRollCount() >= 1 then
					RerollRemote:FireServer(v["unique_id"])
					task.wait()
				end
			elseif QuestCount() > 1 then
				if NeonTable[v["entry_name"]] then
					ClaimRemote:InvokeServer(v["unique_id"])
					task.wait()
				elseif not NeonTable[v["entry_name"]] and ReRollCount() >= 1 then
					RerollRemote:FireServer(v["unique_id"])
					task.wait()
				elseif not NeonTable[v["entry_name"]] and ReRollCount() <= 0 then
					ClaimRemote:InvokeServer(v["unique_id"])
					task.wait()
				end
			end
		end
	end
	task.wait(1)
	NewTaskBool = true
end

local function NewClaim()
	NewClaimBool = false
	for _, v in pairs(Bypass("ClientData").get("quest_manager")["quests_cached"]) do
		if ClaimTable[v["entry_name"]] then
			if v["steps_completed"] == ClaimTable[v["entry_name"]][1] then
				ClaimRemote:InvokeServer(v["unique_id"])
				task.wait()
			end
		elseif not ClaimTable[v["entry_name"]] and v["steps_completed"] == 1 then
			ClaimRemote:InvokeServer(v["unique_id"])
			task.wait()
		end
	end
	task.wait(1)
	NewClaimBool = true
end

local function isMuleInGame()
	for _, player in Players:GetPlayers() do
		if player.Name == getgenv().SETTINGS.TRADE_COLLECTOR_NAME then
			return true
		end
	end
	return false
end

local function getPlayersInGame()
	local playerTable = {}
	for _, player in Players:GetPlayers() do
		if player.Name == Player.Name then
			continue
		end
		table.insert(playerTable, player.Name)
	end
	table.sort(playerTable)
	return playerTable
end

-- buy the lure bait and place it
local function buyLure()
	local args = {
		[1] = {
			[1] = {
				["properties"] = {
					["cframe"] = CFrame.new(14, 0, -14)
						* CFrame.Angles(-0, 8.742277657347586e-08, 3.82137093032941e-15),
				},
				["kind"] = "lures_2023_normal_lure",
			},
		},
	}

	game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))
end

-- give cookie bait to lure
local function placeBait(baitIdPasson)
	local args = {
		[1] = game:GetService("Players").LocalPlayer,
		[2] = normalLure,
		[3] = "UseBlock",
		[4] = {
			["bait_unique"] = baitIdPasson,
		},
		[5] = game:GetService("Players").LocalPlayer.Character,
	}

	game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
end

local function findBait(baitPassOn)
	local bait
	for _, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.food) do
		if v.id == baitPassOn then
			bait = v.unique
			return bait
		end
	end
end


local function subToHouse()
	game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/SubscribeToHouse"):FireServer(Player)
end


local function agePotion(FoodPassOn)
	for _, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.food) do
		if v.id == FoodPassOn then
			local isEgg = if table.find(pets_eggs, Bypass("ClientData").get("pet_char_wrappers")[1]["pet_id"])
				then true
				else false
			local petAge = Bypass("ClientData").get("pet_char_wrappers")[1]["pet_progression"]["age"]
			if isEgg or petAge >= 6 then
				return
			end
			ReplicatedStorage.API["PetAPI/ConsumeFoodItem"]:FireServer(
				v.unique,
				Bypass("ClientData").get("pet_char_wrappers")[1].pet_unique
			)
			return
		end
	end
end


local function getPlayersInGame()
	local playerTable = {}
	for _, player in Players:GetPlayers() do
		if player.Name == Player.Name then
			continue
		end
		table.insert(playerTable, player.Name)
	end
	table.sort(playerTable)
	return playerTable
end


-- buy the lure bait and place it
local function buyLure()
	local args = {
		[1] = {
			[1] = {
				["properties"] = {
					["cframe"] = CFrame.new(14, 0, -14)
						* CFrame.Angles(-0, 8.742277657347586e-08, 3.82137093032941e-15),
				},
				["kind"] = "lures_2023_normal_lure",
			},
		},
	}

	game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))
end


-- give cookie bait to lure
local function placeBait(baitIdPasson)
	local args = {
		[1] = game:GetService("Players").LocalPlayer,
		[2] = normalLure,
		[3] = "UseBlock",
		[4] = {
			["bait_unique"] = baitIdPasson,
		},
		[5] = game:GetService("Players").LocalPlayer.Character,
	}

	game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
end


local function findBait(baitPassOn)
	local bait
	for _, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.food) do
		if v.id == baitPassOn then
			bait = v.unique
			return bait
		end
	end
end


local function buyPet()
	local BuyPet = ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("pets", Pet2Buy, {})
	if BuyPet == "too little money" then
		return false
	end
	return true
end


local function getEgg()
	for _, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.pets) do
		if v.id == Egg2Buy and v.id ~= "practice_dog" and v.properties.age ~= 6 and not v.properties.mega_neon then
			ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v.unique, { ["use_sound_delay"] = true })
			PetCurrentlyFarming = v.unique
			return true
		end
	end
	local BuyEgg = ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("pets", Egg2Buy, {})
	if BuyEgg == "too little money" then
		-- nothing
		return
	end
	task.wait(1)
end


local function GetGiftPet()
	for _, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.gifts) do
		if v["id"] == Gift2Buy then
			ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v.unique, { ["use_sound_delay"] = true })
			task.wait(1)
			ReplicatedStorage.API["LootBoxAPI/ExchangeItemForReward"]:InvokeServer(v["id"], v["unique"])
			return true
		end
	end

	local BuyGift = ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("gifts", Gift2Buy, {})
	if tostring(BuyGift) == "too little money" then
		--nothing
		return true -- dont wanna buy egg, we will wait for event currenty
	end
end


local function priorityEgg()
	local found_pet = false
	while found_pet == false do
		task.wait()
		for _, v in ipairs(SETTINGS.HATCH_EGG_PRIORITY_NAMES) do
			for i, v2 in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.pets) do
				if v == v2.id and v2.id ~= "practice_dog" then
					ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v2.unique, { ["use_sound_delay"] = true })
					PetCurrentlyFarming = v2.unique
					return true
				end
			end
		end

		return false
	end
end


local function priorityPet()
	local Petage = 5
	local isNeon = true
	local found_pet = false
	while found_pet == false do
		task.wait()
		for i, v in ipairs(SETTINGS.PET_ONLY_PRIORITY_NAMES) do
			for i2, v2 in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.pets) do
				if
					v == v2.id
					and v2.id ~= "practice_dog"
					and v2.properties.age == Petage
					and v2.properties.neon == isNeon
				then
					ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v2.unique, { ["use_sound_delay"] = true })
					PetCurrentlyFarming = v2.unique
					return true
				end
			end
		end
		if found_pet == false then
			Petage = Petage - 1
			if Petage == 0 and isNeon == true then
				Petage = 5
				isNeon = nil
			elseif Petage == 0 and isNeon == nil then
				--getLegendary() -- the selected pet is finished so stop searching
				return false
			end
		end
	end
end


local function getNeonPet()
	local Petage = 5
	local isNeon = true
	local found_pet = false
	while found_pet == false do
		task.wait()
		for i, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.pets) do
			if v.id ~= "practice_dog" and v.properties.age == Petage and v.properties.neon == isNeon then
				ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v.unique, { ["use_sound_delay"] = true })
				PetCurrentlyFarming = v.unique
				return true
			end
		end
		if found_pet == false then
			Petage = Petage - 1
			if Petage == 0 and isNeon == true then
				return false
			end
		end
	end
end


local function getPet()
	if SETTINGS.FOCUS_FARM_AGE_POTION then
		if GetInventory:PetRarityAndAge("common", 6) then
			return
		end
		if GetInventory:PetRarityAndAge("legendary", 6) then
			return
		end
		if GetInventory:PetRarityAndAge("ultra_rare", 6) then
			return
		end
		if GetInventory:PetRarityAndAge("rare", 6) then
			return
		end
		if GetInventory:PetRarityAndAge("uncommon", 6) then
			return
		end
	end

	if SETTINGS.PET_NEON_PRIORITY then
		if getNeonPet() then
			return
		end
	end

	if SETTINGS.PET_ONLY_PRIORITY then
		if priorityPet() then
			return
		end
	end

	if SETTINGS.HATCH_EGG_PRIORITY then
		if priorityEgg() then
			return
		end
		for i = 1, 1 do
			ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("pets", SETTINGS.HATCH_EGG_PRIORITY_NAMES[1], {})
			return
		end
	end

	if GetInventory:PetRarityAndAge("common", 5) then
		return
	end
	if GetInventory:PetRarityAndAge("uncommon", 5) then
		return
	end
	if GetInventory:PetRarityAndAge("rare", 5) then
		return
	end
	if GetInventory:PetRarityAndAge("ultra_rare", 5) then
		return
	end
	if GetInventory:PetRarityAndAge("legendary", 5) then
		return
	end

	-- if GetGiftPet() then
	--     task.wait(1)
	--     if getLegendary() then return end
	--     if getUltraRare() then return end
	--     if getRare() then return end
	--     if getUnCommon() then return end
	--     if getCommon() then return end
	-- end

	if getEgg() then
		return
	end
	-- if buyPet() then return end
end


local function FoodAilments(FoodPassOn) --FoodPassOn means "icecream" for this example
	local hasFood = false
	-- checks inventory to see if it has food
	for _, v in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.food) do
		if v.id == FoodPassOn then
			hasFood = true
			ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v.unique, { ["use_sound_delay"] = true })
			task.wait(1)
			ReplicatedStorage.API["PetAPI/ConsumeFoodItem"]:FireServer(
				v.unique,
				Bypass("ClientData").get("pet_char_wrappers")[1].pet_unique
			)
			break
		end
	end

	-- if it doesnt have have then buy it and feed it
	if not hasFood then
		ReplicatedStorage.API["ShopAPI/BuyItem"]:InvokeServer("food", FoodPassOn, {})
		task.wait()
		FoodAilments(FoodPassOn)
	end
end


local function DayNightAilments(DayNightAilmentsPassOn) -- DayNightAilmentsPassOn means "bed or shower"
	ReplicatedStorage.API["HousingAPI/ActivateFurniture"]:InvokeServer(
		Player,
		DayNightAilmentsPassOn,
		"UseBlock",
		{ ["cframe"] = Player.Character.HumanoidRootPart.CFrame },
		Bypass("ClientData").get("pet_char_wrappers")[1]["char"]
	)
end


local function removeHandHeldItem()
	local tool = Player.Character:FindFirstChildOfClass("Tool")
	if tool then
		ReplicatedStorage.API["ToolAPI/Unequip"]:InvokeServer(tool.unique.Value, {})
	end
end


local function AgeUpPotionLevelUp()
	local sameUnqiue
	local count = 0

	local function equipPet()
		-- checks inventory for neon pet
		for _, v in
			pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets)
		do
			if
				v.id == selectedItem
				and v.id ~= "practice_dog"
				and v.properties.age ~= 6
				and v.properties.neon
				and not v.properties.mega_neon
			then
				ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v.unique, { ["use_sound_delay"] = true })
				return true
			end
		end

		for _, v in
			pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets)
		do
			if
				v.id == selectedItem
				and v.id ~= "practice_dog"
				and v.properties.age ~= 6
				and not v.properties.mega_neon
			then
				ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(v.unique, { ["use_sound_delay"] = true })
				return true
			end
		end
		return false
	end

	local function feedAgePotion()
		for _, v in
			pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.food)
		do
			if v.id == "pet_age_potion" then
				if sameUnqiue == v.unique then
					return true
				end -- means the same age potion is still in inventory
				sameUnqiue = v.unique
				ReplicatedStorage.API["PetAPI/ConsumeFoodItem"]:FireServer(
					v.unique,
					Bypass("ClientData").get("pet_char_wrappers")[1].pet_unique
				)
				return true
			end
		end
		return false
	end

	while getgenv().feedAgeUpPotionToggle do
		local hasPetEquipped = Bypass("ClientData").get("pet_char_wrappers")[1]
		if not hasPetEquipped then
			equipPet()
			task.wait(1)
		end

		if selectedItem ~= Bypass("ClientData").get("pet_char_wrappers")[1]["pet_id"] then
			equipPet()
			task.wait(1)
		end

		local age = Bypass("ClientData").get("pet_char_wrappers")[1]["pet_progression"]["age"]
		if age >= 6 then
			local hasPet = equipPet()
			task.wait(1) -- wait for pet to equip
			if not hasPet then
				getgenv().PotionToggle:Set(false)
				return
			end
		end

		local hasAgeUpPotion = feedAgePotion()
		if not hasAgeUpPotion then
			print("no more age up potions")
			getgenv().PotionToggle:Set(false)
			return
		end
		task.wait(1)
	end
end


-- local function floorPart()
-- 	for _, v in workspace:GetChildren() do
-- 		if v.Name == "FloorPart1" then
-- 			return
-- 		end
-- 	end
-- 	local part = Instance.new("Part")
-- 	part.Position = game.Workspace.Interiors:FindFirstChild(
-- 		tostring(game.Workspace.Interiors:FindFirstChildWhichIsA("Model"))
-- 	).Static.Campsite.MarshmallowChair.VintageChair.Union.Position + Vector3.new(0, -2, 0)
-- 	part.Size = Vector3.new(2000, 2, 2000)
-- 	part.Anchored = true
-- 	part.Name = "FloorPart1"
-- 	part.Parent = workspace
-- end


local function CheckifEgg()
	local PetNameID = Bypass("ClientData").get("pet_char_wrappers")[1]["pet_id"]
	local PetUniqueID = Bypass("ClientData").get("pet_char_wrappers")[1]["pet_unique"]
	local PetAge = Bypass("ClientData").get("pet_char_wrappers")[1]["pet_progression"]["age"]

	if PetUniqueID == PetCurrentlyFarming then
		return
	end
	if PetAge ~= 1 then
		return
	end

	getPet()
end


local function SwitchOutFullyGrown()
	if Bypass("ClientData").get("pet_char_wrappers")[1] == nil or false then
		getPet()
		return
	end
	local PetAge = Bypass("ClientData").get("pet_char_wrappers")[1]["pet_progression"]["age"]
	if PetAge == 6 then
		getPet()
		return
	elseif PetAge == 1 then
		CheckifEgg()
	end
end


local function ClickTradeWindowPopUps()
	for _, v in pairs(Player.PlayerGui.DialogApp.Dialog.NormalDialog.Buttons:GetDescendants()) do
		if v.Name == "TextLabel" then
			if
				v.Text == "Accept"
				or v.Text == "Okay"
				or v.Text == "Next"
				or v.Text == "I understand"
				or v.Text == "No"
			then
				clickGuiButton(v.Parent.Parent)
				return
			end
		end
	end

	for _, v in pairs(Player.PlayerGui.DialogApp.Dialog.HeaderDialog.Buttons:GetDescendants()) do
		if v.Name == "TextLabel" then
			if v.Text == "Accept" or v.Text == "Okay" or v.Text == "Next" or v.Text == "I understand" then
				clickGuiButton(v.Parent.Parent)
				return
			end
		end
	end
end


local function checkInventory()
	if not game.Players[SETTINGS.TRADE_COLLECTOR_NAME] then
		return false, "false", nil
	end

	for _, accessory in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.pet_accessories) do
		if not SETTINGS.TRADE_LIST.PET_WEAR_TABLE[1] then
			break
		end
		for _, v2 in SETTINGS.TRADE_LIST.PET_WEAR_TABLE do
			if accessory.id == v2 then
				return true, "pet_accessories", SETTINGS.TRADE_LIST.PET_WEAR_TABLE
			end
		end
	end

	for _, vehicle in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.transport) do
		if not SETTINGS.TRADE_LIST.VEHICLES_TABLE[1] then
			break
		end
		for _, v2 in SETTINGS.TRADE_LIST.VEHICLES_TABLE do
			if vehicle.id == v2 then
				return true, "transport", SETTINGS.TRADE_LIST.VEHICLES_TABLE
			end
		end
	end

	for _, food in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.food) do
		if not SETTINGS.TRADE_LIST.FOOD_TABLE[1] then
			break
		end
		for _, v2 in SETTINGS.TRADE_LIST.FOOD_TABLE do
			if food.id == v2 then
				return true, "food", SETTINGS.TRADE_LIST.FOOD_TABLE
			end
		end
	end

	for _, gift in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.gifts) do
		if not SETTINGS.TRADE_LIST.GIFTS_TABLE[1] then
			break
		end
		for _, v2 in SETTINGS.TRADE_LIST.GIFTS_TABLE do
			if gift.id == v2 then
				return true, "gifts", SETTINGS.TRADE_LIST.GIFTS_TABLE
			end
		end
	end

	for _, toy in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.toys) do
		if not SETTINGS.TRADE_LIST.TOYS_TABLE[1] then
			break
		end
		for _, v2 in SETTINGS.TRADE_LIST.TOYS_TABLE do
			if toy.id == v2 then
				return true, "toys", SETTINGS.TRADE_LIST.TOYS_TABLE
			end
		end
	end

	if SETTINGS.TRADE_ONLY_LUMINOUS_MEGA then
		for _, pet in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.pets) do
			for _, v2 in SETTINGS.TRADE_LIST.PETS_TABLE do
				if
					pet.id == v2
					or (pet.properties.neon and pet.properties.age == 6)
					or pet.properties.mega_neon == true
				then
					return true, "pets", SETTINGS.TRADE_LIST.PETS_TABLE
				end
			end
		end
	else
		for _, pet in pairs(Bypass("ClientData").get_data()[Player.Name].inventory.pets) do
			for _, v2 in SETTINGS.TRADE_LIST.PETS_TABLE do
				if
					pet.id == v2
					or pet.properties.age == 6
					or (pet.properties.neon and pet.properties.age == 6)
					or pet.properties.mega_neon == true
				then
					return true, "pets", SETTINGS.TRADE_LIST.PETS_TABLE
				end
			end
		end
	end

	return false, "false", nil
end


local function tradeCollector(namePassOn)
	while SETTINGS.ENABLE_TRADE_COLLECTOR and SETTINGS.TRADE_COLLECTOR_NAME and Players[namePassOn] do
		local tabBoolean, tabName, tables = checkInventory()
		if not tabBoolean then
			return
		end
		pcall(function()
			repeat
				if not Player.PlayerGui.TradeApp.Frame.Visible then
					ReplicatedStorage.API:FindFirstChild("TradeAPI/SendTradeRequest"):FireServer(Players[namePassOn])
					task.wait(math.random(8, 15))
				end

				ClickTradeWindowPopUps()
				task.wait()
			until Player.PlayerGui.TradeApp.Frame.Visible
			ClickTradeWindowPopUps()
			task.wait(1)
			ClickTradeWindowPopUps()

			local petCounter = 0
			if SETTINGS.TRADE_ONLY_LUMINOUS_MEGA then
				for _, pet in pairs(Bypass("ClientData").get_data()[Player.Name].inventory[tabName]) do
					for _, v2 in tables do
						if
							pet.id == v2
							or (pet.properties.neon and pet.properties.age == 6)
							or pet.properties.mega_neon == true
						then
							ReplicatedStorage.API:FindFirstChild("TradeAPI/AddItemToOffer"):FireServer(pet.unique)
							petCounter = petCounter + 1
							if petCounter >= 18 then
								break
							end
							task.wait()
						end
					end
				end
			else
				for _, pet in pairs(Bypass("ClientData").get_data()[Player.Name].inventory[tabName]) do
					for _, v2 in tables do
						if
							pet.id == v2
							or pet.properties.age == 6
							or (pet.properties.neon and pet.properties.age == 6)
							or pet.properties.mega_neon == true
						then
							ReplicatedStorage.API:FindFirstChild("TradeAPI/AddItemToOffer"):FireServer(pet.unique)
							petCounter = petCounter + 1
							if petCounter >= 18 then
								break
							end
							task.wait()
						end
					end
				end
			end
			local stuck = 30
			repeat
				local lock = Player.PlayerGui.TradeApp.Frame.NegotiationFrame.Body.LockIcon.Visible
				stuck -= 1
				task.wait(1)

			until not lock or stuck <= 0
			-- wait for timer to hit 0

			ClickTradeWindowPopUps()
			task.wait(1)
			ReplicatedStorage.API:FindFirstChild("TradeAPI/AcceptNegotiation"):FireServer()
			task.wait(3)
			ReplicatedStorage.API:FindFirstChild("TradeAPI/ConfirmTrade"):FireServer()
			petCounter = 0
			ClickTradeWindowPopUps()
		end)
		task.wait(1)
		ClickTradeWindowPopUps()
		task.wait()
	end
end


local function autoFarm()
	if not getgenv().auto_farm then
		return
	end
	Teleport.MainMap()

	local function CompletePetAilments()
		-- if stopEquip then return end
		if getgenv().feedAgeUpPotionToggle then
			return
		end
		if Bypass("ClientData").get("pet_char_wrappers")[1] == nil then
			ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(PetCurrentlyFarming, {})
			return -- return because when pet gets requipped it will call this function anyway
		end

		if not Bypass("ClientData").get("pet_char_wrappers")[1]["ailments_monitor"] then
			return
		end
		if #Bypass("ClientData").get("pet_char_wrappers")[1]["ailments_monitor"]["ailments"] == 0 then
			return
		end

		if #Bypass("ClientData").get("pet_char_wrappers")[1]["ailments_monitor"]["ailments"] >= 3 then
			stopDoingTasks = true
			ReplicatedStorage.API["ToolAPI/Unequip"]:InvokeServer(PetCurrentlyFarming, {})
			task.wait(2)
			ReplicatedStorage.API["ToolAPI/Equip"]:InvokeServer(PetCurrentlyFarming, {})
			task.wait(2)
			stopDoingTasks = false
		end

		for _, v in pairs(Bypass("ClientData").get("pet_char_wrappers")[1]["ailments_monitor"]["ailments"]) do
			if v["id"] == "hungry" then
				FoodAilments("icecream")
				task.wait()
				if not SETTINGS.FOCUS_FARM_AGE_POTION then
					agePotion("pet_age_potion")
				end

				break
			elseif v["id"] == "thirsty" then
				FoodAilments("water")
				break
			elseif v["id"] == "sick" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					Bypass("RouterClient").get("MonitorAPI/HealWithDoctor"):FireServer()

					break
				end
			elseif v["id"] == "salon" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					ReplicatedStorage.API["LocationAPI/SetLocation"]:FireServer("Salon")
					break
				end
			elseif v["id"] == "pizza_party" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					ReplicatedStorage.API["LocationAPI/SetLocation"]:FireServer("PizzaShop")
					break
				end
			elseif v["id"] == "school" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					ReplicatedStorage.API["LocationAPI/SetLocation"]:FireServer("School")
					break
				end
			elseif v["id"] == "bored" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					Teleport.PlayGround()
					-- DayNightAilments(Piano)
					break
				end
			elseif v["id"] == "sleepy" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					subToHouse()
					task.wait(2)
					DayNightAilments(Bed)

					baitId = findBait("fire_dimension_2024_burnt_bites_bait")
					if baitId == nil then
						baitId = findBait("lures_2023_campfire_cookies")
					end
					placeBait(baitId)
					task.wait(1)
					placeBait(baitId)
					break
				end
			elseif v["id"] == "dirty" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					DayNightAilments(Shower)
					break
				end
			elseif v["id"] == "beach_party" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					Teleport.BeachParty()
					break
				end
			elseif v["id"] == "camping" then
				if tonumber(v["progress"]) == tonumber(v["old_progress"]) then
					Teleport.CampSite()
					break
				end
			end
		end
	end


	local function CompleteBabyAilments()
		if not Bypass("ClientData").get("char_wrapper") then
			return
		end
		if not Bypass("ClientData").get("char_wrapper")["ailments_monitor"] then
			return
		end

		if #Bypass("ClientData").get("char_wrapper")["ailments_monitor"]["ailments"] == 0 then
			return
		end
		for _, m in pairs(Bypass("ClientData").get("char_wrapper")["ailments_monitor"]["ailments"]) do
			if m["id"] == m["id"] then
				Bypass("RouterClient").get("MonitorAPI/AddRate"):InvokeServer(m["id"], 100)
				return
			end
		end
	end


	game.Players.LocalPlayer.PlayerGui.AilmentsMonitorApp.Ailments.ChildAdded:Connect(function()
		if getgenv().feedAgeUpPotionToggle then
			return
		end
		if stopDoingTasks then
			return
		end
		removeHandHeldItem()

		CompletePetAilments()
		CompleteBabyAilments()
	end)


	game.Players.LocalPlayer.PlayerGui.AilmentsMonitorApp.Ailments.ChildRemoved:Connect(function()
		if getgenv().feedAgeUpPotionToggle then
			return
		end
		if stopDoingTasks then
			return
		end

		if not SETTINGS.FOCUS_FARM_AGE_POTION then
			SwitchOutFullyGrown()
			task.wait(2)
		end

		-- if SETTINGS.FOCUS_FARM_AGE_POTION then
		--     getPet()
		-- end

		CompletePetAilments()
		CompleteBabyAilments()

	end)


	-- For text that popups on bottom ui
	Player.PlayerGui.HintApp.TextLabel:GetPropertyChangedSignal("Text"):Connect(function()
		if Player.PlayerGui.HintApp.TextLabel.Text:match("aged up!") then
			if getgenv().feedAgeUpPotionToggle then
				return
			end
			if SETTINGS.PET_AUTO_FUSION then
				Fusion:MakeMega(false) -- makes neon
				Fusion:MakeMega(true) -- makes mega
				task.wait(2) -- gives it time for pet to fully equipped
			end
			task.wait(2)
			if not SETTINGS.FOCUS_FARM_AGE_POTION then
				SwitchOutFullyGrown()
			end
		elseif Player.PlayerGui.HintApp.TextLabel.Text:match("You have left the queue") then
			if workspace.Interiors:FindFirstChild("Winter2023Shop") then
				Player.Character.PrimaryPart.CFrame = workspace.Interiors.Winter2023Shop.PetRescue.JoinZone.Collider.CFrame
					+ Vector3.new(0, -14, 0)
			end
		end
	end)


	--// Fires when inside the minigame
	Player.PlayerGui.MinigameInGameApp:GetPropertyChangedSignal("Enabled"):Connect(function()
		if Player.PlayerGui.MinigameInGameApp.Enabled then
			Player.PlayerGui.MinigameInGameApp:WaitForChild("Body")
			Player.PlayerGui.MinigameInGameApp.Body:WaitForChild("Middle")
			Player.PlayerGui.MinigameInGameApp.Body.Middle:WaitForChild("Container")
			Player.PlayerGui.MinigameInGameApp.Body.Middle.Container:WaitForChild("TitleLabel")
			if Player.PlayerGui.MinigameInGameApp.Body.Middle.Container.TitleLabel.Text:match("CRANKY'S CRAZY CURRENTS") then
				repeat
					CrazySea.GetChests()
					CrazySea.GetCoins()
					task.wait()
				until not workspace.Interiors:FindFirstChild("OceanMinigameInterior")
				
			end
		end
	end)


	local function RemoveGameOverButton()
		Player.PlayerGui.MinigameRewardsApp.Body.Button:WaitForChild("Face")
		for _, v in pairs(Player.PlayerGui.MinigameRewardsApp.Body.Button:GetDescendants()) do
			if v.Name == "TextLabel" then
				if v.Text == "NICE!" then
					task.wait(1)
					clickGuiButton(v.Parent.Parent, 30, 60)
					break
				end
			end
		end
	end


	-- fires when it ask you if you want to join minigame
	Player.PlayerGui.DialogApp.Dialog.ChildAdded:Connect(function(NormalDialogChild)
		if NormalDialogChild.Name == "NormalDialog" then
			NormalDialogChild:GetPropertyChangedSignal("Visible"):Connect(function()
				if NormalDialogChild.Visible then
					NormalDialogChild:WaitForChild("Info")
					NormalDialogChild.Info:WaitForChild("TextLabel")
					NormalDialogChild.Info.TextLabel:GetPropertyChangedSignal("Text"):Connect(function()
						if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("Crazy Currents") then
							FireButton("Yes")
						elseif
							Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("invitation")
						then
							game:Shutdown()
						
						end
					end)
				end
			end)
		end
	end)


	Player.PlayerGui.DialogApp.Dialog.NormalDialog:GetPropertyChangedSignal("Visible"):Connect(function()
		if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Visible then
			Player.PlayerGui.DialogApp.Dialog.NormalDialog:WaitForChild("Info")
			Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info:WaitForChild("TextLabel")
			Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel:GetPropertyChangedSignal("Text"):Connect(function()
				if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("Crazy Currents") then
					FireButton("Yes")
				elseif Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("invitation") then
					game:Shutdown()
				
				end
			end)
		end
	end)


	-- if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Visible then
	--     if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("Tile Skip is starting soon!") then
	--         FireButton("Yes")

	--     elseif Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("Crabby Grabby is starting soon!") then
	--         FireButton("Yes")

	--     end
	-- end


	Player.PlayerGui.MinigameRewardsApp.Body:GetPropertyChangedSignal("Visible"):Connect(function()
		if Player.PlayerGui.MinigameRewardsApp.Body.Visible then
			Player.PlayerGui.MinigameRewardsApp.Body:WaitForChild("Button")
			Player.PlayerGui.MinigameRewardsApp.Body.Button:WaitForChild("Face")
			Player.PlayerGui.MinigameRewardsApp.Body.Button.Face:WaitForChild("TextLabel")
			if Player.PlayerGui.MinigameRewardsApp.Body.Button.Face.TextLabel.Text:match("NICE!") then
				Player.Character.HumanoidRootPart.Anchored = false
				RemoveGameOverButton()
				stopDoingTasks = false
				Teleport.DeleteMainMapParts()
			end
		end
	end)


	-- Player.PlayerGui.BattlePassApp.Body.Header.Title.Title.Text:match("Pony Pass")
	Player.PlayerGui.BattlePassApp.Body:GetPropertyChangedSignal("Visible"):Connect(function()
		if Player.PlayerGui.BattlePassApp.Body.Visible then
			Player.PlayerGui.BattlePassApp.Body:WaitForChild("InnerBody")
			Player.PlayerGui.BattlePassApp.Body.InnerBody:WaitForChild("ScrollingFrame")
			Player.PlayerGui.BattlePassApp.Body.InnerBody.ScrollingFrame:WaitForChild("21")
			if Player.PlayerGui.BattlePassApp.Body.InnerBody.ScrollingFrame[21] then
				for _, v in Player.PlayerGui.BattlePassApp.Body.InnerBody.ScrollingFrame:GetChildren() do
					if not v:FindFirstChild("ButtonFrame") then
						continue
					end
					if v.ButtonFrame:FindFirstChild("ClaimButton") then
						ReplicatedStorage.API["BattlePassAPI/ClaimReward"]:InvokeServer(
							"celestial_2024_pass_4",
							tonumber(v.Name) - 1
						)
						task.wait(1)
						ReplicatedStorage.API["BattlePassAPI/ClaimReward"]:InvokeServer(
							"celestial_2024_pass_4",
							tonumber(v.Name)
						)
					end
				end

				-- Player.PlayerGui.BattlePassApp.Body.Header.ExitFrame.ExitButton
				-- Player.PlayerGui.BattlePassApp.Body:WaitForChild("Header")
				-- Player.PlayerGui.BattlePassApp.Body.Header:WaitForChild("ExitFrame")
				-- Player.PlayerGui.BattlePassApp.Body.Header.ExitFrame:WaitForChild("ExitButton")
				-- local count = 0
				-- repeat
				--     clickGuiButton(Player.PlayerGui.BattlePassApp.Body.Header.ExitFrame.ExitButton, 30, 60)
				--     count += 1
				--     task.wait(1)
				-- until not Player.PlayerGui.BattlePassApp.Body.Visible or count >= 10

				-- joinMiniGame()
				stopDoingTasks = false
			end
		end
	end)


	--// Code below runs once when auto farm is enabled
	if SETTINGS.PET_AUTO_FUSION then
		Fusion:MakeMega(false)
		Fusion:MakeMega(true)
	end


	task.wait()
	getPet()
	task.wait()
	CompletePetAilments()
	CompleteBabyAilments()
	task.wait()
	getTradeLicense()

	-- if not Bypass("ClientData").get_data()[Player.Name].inventory.toys.trade_license then
	--     getTradeLicense()
	--     FireButton("Okay")
	-- end
	-- ReplicatedStorage.API["EventAPI/ClaimObbyReward"]:InvokeServer(1)

	-- adopt me code
	-- ReplicatedStorage.API["CodeRedemptionAPI/AttemptRedeemCode"]:InvokeServer("2xGARDEN")

	-- setfpscap(SETTINGS.SET_FPS)
end


local function startAutoFarm()
	if SETTINGS.ENABLE_AUTO_FARM then
		findFurniture()
		if Bed then
			-- task.wait(math.random(1, 5))
			-- FarmToggle:Set(true)
			getgenv().auto_farm = true
			autoFarm()
			task.wait(2)
		else
			buyCrib()
			-- FarmToggle:Set(false)
			startAutoFarm()
		end
	end
end


local function SendMessage(url, message, userId)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json",
	}
	local data = {
		["content"] = `<@{userId}> {message}`,
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body,
	})
	print("Sent")
end


-----------------------------------------------------------------------------------------------
--[[ Handling ]]--
-----------------------------------------------------------------------------------------------


Player.Idled:Connect(function()
	VirtualUser:ClickButton2(Vector2.new())
end)


Player.OnTeleport:Connect(function(State)
	if State == Enum.TeleportState.InProgress then
		game:Shutdown()
	end
end)


Players.PlayerRemoving:Connect(function(player)
	if player.Name == getgenv().SETTINGS.TRADE_COLLECTOR_NAME then
		stopDoingTasks = false
	end
end)


WelcomeScreen = Player.PlayerGui.DialogApp.Dialog.NormalDialog:GetPropertyChangedSignal("Visible"):Connect(function()
	if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Visible then
		Player.PlayerGui.DialogApp.Dialog.NormalDialog:WaitForChild("Info")
		Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info:WaitForChild("TextLabel")
		Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel:GetPropertyChangedSignal("Text"):Connect(function()
			if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("Welcome to Adopt Me!") then
				FireButton("Next")
				task.wait(1)
				FireButton("Start")
				task.wait(1)
				completeStarterTutorial()
				getTradeLicense()
				task.wait(1)
				game:Shutdown()
				WelcomeScreen:Disconnect()
			end
		end)
	end
end)


--// Main Adopt me Screen (Play! Button)
NewsAppConnection = Player.PlayerGui.NewsApp:GetPropertyChangedSignal("Enabled"):Connect(function()
	if Player.PlayerGui.NewsApp.Enabled then
		local AbsPlay = Player.PlayerGui.NewsApp
			:WaitForChild("EnclosingFrame")
			:WaitForChild("MainFrame")
			:WaitForChild("Contents")
			:WaitForChild("PlayButton")
		clickGuiButton(AbsPlay)
		-- firesignal(AbsPlay.MouseButton1Click)
		NewsAppConnection:Disconnect()
	end
end)


PickColorConn = Player.PlayerGui.DialogApp.Dialog.ThemeColorDialog:GetPropertyChangedSignal("Visible"):Connect(function()
    if Player.PlayerGui.DialogApp.Dialog.ThemeColorDialog.Visible then
        if tutorialDebonce then
            return
        end
        tutorialDebonce = true
        local colorButton = Player.PlayerGui.DialogApp.Dialog.ThemeColorDialog
            :WaitForChild("Info")
            :WaitForChild("Response")
            :WaitForChild("ColorTemplate")
        local doneButton = Player.PlayerGui.DialogApp.Dialog.ThemeColorDialog
            :WaitForChild("Buttons")
            :WaitForChild("ButtonTemplate")
        if not colorButton then
            return
        end
        clickGuiButton(colorButton)
        clickGuiButton(doneButton)

        tutorialDebonce = false
        PickColorConn:Disconnect()
    end
end)


banMessageConnection = Player.PlayerGui.DialogApp.Dialog.NormalDialog:GetPropertyChangedSignal("Visible"):Connect(function()
    if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Visible then
        Player.PlayerGui.DialogApp.Dialog.NormalDialog:WaitForChild("Info")
        Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info:WaitForChild("TextLabel")
        Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel:GetPropertyChangedSignal("Text"):Connect(function()
            if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("ban") then
                FireButton("Okay")
                banMessageConnection:Disconnect()
            elseif
                Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match(
                    "You have been awarded"
                )
            then
                FireButton("Awesome!")
            end
        end)
    end
end)


-- // Clicks on baby button
RoleChooserDialogConnection = Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog:GetPropertyChangedSignal("Visible"):Connect(function()
	task.wait()
	if Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Visible then
		firesignal(Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Baby.MouseButton1Click)
		RoleChooserDialogConnection:Disconnect()
	end
end)


--// Clicks no robux product button
RobuxProductDialogConnection = Player.PlayerGui.DialogApp.Dialog:GetPropertyChangedSignal("Visible"):Connect(function()
	if not Player.PlayerGui.DialogApp.Dialog.Visible then return end
	Player.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
	print("RobuxProductDialog")
	Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog:GetPropertyChangedSignal("Visible"):Connect(function()
		print("about to click product button")
		task.wait()
		if not Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then return end
		for _, v in pairs(Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetDescendants()) do
			if v.Name == "TextLabel" then
				if v.Text == "No Thanks" then
					repeat
						clickGuiButton(v.Parent.Parent) -- no thanks button
					until not Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible
					DailyBoolean = false
					RobuxProductDialogConnection:Disconnect()
				end
			end
		end
	end)
end)


DailyClaimConnection = Player.PlayerGui.DailyLoginApp:GetPropertyChangedSignal("Enabled"):Connect(function()
	repeat task.wait() until Player.PlayerGui.DailyLoginApp.Enabled
	if not Player.PlayerGui.DailyLoginApp.Enabled then return end
	task.wait()
	if not Player.PlayerGui.DailyLoginApp.Frame.Visible then return end
	for _, v in pairs(Player.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetDescendants()) do
		if v.Name == "TextLabel" then
			if v.Text == "CLOSE" then
				repeat
					clickGuiButton(v.Parent.Parent) -- Close button
					task.wait(1)
				until not Player.PlayerGui.DailyLoginApp.Frame.Visible

				GrabDailyReward()
				DailyClaimConnection:Disconnect()
			elseif v.Text == "CLAIM!" then
				repeat
					clickGuiButton(v.Parent.Parent) -- Claim and Close button
					task.wait(1)
				until not Player.PlayerGui.DailyLoginApp.Frame.Visible
				-- firesignal(v.Parent.Parent.MouseButton1Click) --claim button
				-- firesignal(v.Parent.Parent.MouseButton1Click) --close button

				GrabDailyReward()
				DailyClaimConnection:Disconnect()
			end
		end
	end
end)


DailyClaimConnection = Player.PlayerGui.DailyLoginApp:GetPropertyChangedSignal("Enabled"):Connect(function()
	repeat task.wait() until Player.PlayerGui.DailyLoginApp.Enabled
	if not Player.PlayerGui.DailyLoginApp.Enabled then return end
	task.wait()
	if not Player.PlayerGui.DailyLoginApp.Frame.Visible then return end
	for _, v in pairs(Player.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetDescendants()) do
		if v.Name == "TextLabel" then
			if v.Text == "CLOSE" then
				repeat
					clickGuiButton(v.Parent.Parent) -- Close button
					task.wait(1)
				until not Player.PlayerGui.DailyLoginApp.Frame.Visible

				GrabDailyReward()
				DailyClaimConnection:Disconnect()
			elseif v.Text == "CLAIM!" then
				repeat
					clickGuiButton(v.Parent.Parent) -- Claim and Close button
					task.wait(1)
				until not Player.PlayerGui.DailyLoginApp.Frame.Visible
				-- firesignal(v.Parent.Parent.MouseButton1Click) --claim button
				-- firesignal(v.Parent.Parent.MouseButton1Click) --close button

				GrabDailyReward()
				DailyClaimConnection:Disconnect()
			end
		end
	end
end)


Players.LocalPlayer.PlayerGui.QuestIconApp.ImageButton.EventContainer.IsNew:GetPropertyChangedSignal("Position"):Connect(function()
	if NewTaskBool then
		NewTaskBool = false
		Bypass("RouterClient").get("QuestAPI/MarkQuestsViewed"):FireServer()
		NewTask()
	end
end)


Players.LocalPlayer.PlayerGui.QuestIconApp.ImageButton.EventContainer.IsClaimable:GetPropertyChangedSignal("Position"):Connect(function()
	if NewClaimBool then
		NewClaimBool = false
		NewClaim()
	end
end)


Player.PlayerGui.DialogApp.Dialog.ChildAdded:Connect(function(NormalDialogChild)
	if NormalDialogChild.Name == "NormalDialog" then
		NormalDialogChild:GetPropertyChangedSignal("Visible"):Connect(function()
			if NormalDialogChild.Visible then
				NormalDialogChild:WaitForChild("Info")
				NormalDialogChild.Info:WaitForChild("TextLabel")
				NormalDialogChild.Info.TextLabel:GetPropertyChangedSignal("Text"):Connect(function()
					if NormalDialogChild.Info.TextLabel.Text:match("This trade seems unbalanced") then
						FireButton("Next")
					elseif NormalDialogChild.Info.TextLabel.Text:match("Any items lost to scams") then
						FireButton("I understand")
					end
				end)
			end
		end)
	end
end)


Player.PlayerGui.DialogApp.Dialog.NormalDialog:GetPropertyChangedSignal("Visible"):Connect(function()
	if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Visible then
		Player.PlayerGui.DialogApp.Dialog.NormalDialog:WaitForChild("Info")
		Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info:WaitForChild("TextLabel")
		Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel:GetPropertyChangedSignal("Text"):Connect(function()
			if
				Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("Be careful when trading")
			then
				FireButton("Okay")
			elseif
				Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match(
					"This trade seems unbalanced"
				)
			then
				FireButton("Next")
			end
		end)
	end
end)


game.Players.PlayerAdded:Connect(function(player: Player)
	player.CharacterAdded:Connect(function(character: Model)
		if Players.LocalPlayer.Name == SETTINGS.TRADE_COLLECTOR_NAME then
			return
		end
		if tostring(player.Name) ~= SETTINGS.TRADE_COLLECTOR_NAME then
			return
		end

		local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 120)
		if not humanoidRootPart then
			return
		end
		if tostring(player.Name) ~= SETTINGS.TRADE_COLLECTOR_NAME then
			return
		end --extra check just in case
		task.wait(math.random(5, 15))
		tradeCollector(tostring(player.Name))
	end)
end)


if SETTINGS.WEBHOOK and SETTINGS.WEBHOOK.URL and #SETTINGS.WEBHOOK.URL >= 1 and Player.Name == SETTINGS.TRADE_COLLECTOR_NAME then
	Player.PlayerGui.DialogApp.Dialog:GetPropertyChangedSignal("Visible"):Connect(function()
		if discordCooldown then
			return
		end
		discordCooldown = true
		Player.PlayerGui.DialogApp.Dialog:WaitForChild("HeaderDialog")
		Player.PlayerGui.DialogApp.Dialog.HeaderDialog:GetPropertyChangedSignal("Visible"):Connect(function()
			if not Player.PlayerGui.DialogApp.Dialog.HeaderDialog.Visible then
				return
			end
			Player.PlayerGui.DialogApp.Dialog.HeaderDialog:WaitForChild("Info")
			Player.PlayerGui.DialogApp.Dialog.HeaderDialog.Info:WaitForChild("TextLabel")
			Player.PlayerGui.DialogApp.Dialog.HeaderDialog.Info.TextLabel
				:GetPropertyChangedSignal("Text")
				:Connect(function()
					SendMessage(
						SETTINGS.WEBHOOK.URL,
						Player.PlayerGui.DialogApp.Dialog.HeaderDialog.Info.TextLabel.Text,
						SETTINGS.WEBHOOK.USER_ID
					)
					task.wait(1)
					discordCooldown = false
				end)
		end)
	end)
end

-------------------------------------------------------------------------------------------------------------------
--[[ Main ]]--
-------------------------------------------------------------------------------------------------------------------

if not game:IsLoaded() then
	game.Loaded:Wait()
end

if game.PlaceId ~= 920587237 then
	return
end

repeat task.wait(1) until Bypass("ClientData").get_data()[Player.Name].loaded_in

for _, v in getconnections(Player.Idled) do
	v:Disable()
end

-- Player:WaitForChild("PlayerGui", 600)
-- Player.PlayerGui:WaitForChild("NewsApp", 600)

if gethui then
	TestGui.Parent = gethui()
elseif syn.protect_gui then
	syn.protect_gui(TestGui)
	TestGui.Parent = CoreGui
elseif CoreGui:FindFirstChild("RobloxGui") then
	TestGui.Parent = CoreGui:FindFirstChild("RobloxGui")
else
	TestGui.Parent = CoreGui
end

TestGui.Name = "TestGui"
TestGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

TextButton.AnchorPoint = Vector2.new(0.5, 0.5)
TextButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.65, 0, 0.91, 0)
TextButton.Size = UDim2.new(0.1, 0, 0.1, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextScaled = true
TextButton.TextSize = 14.000
TextButton.TextWrapped = true
TextButton.Parent = TestGui

UserGameSettings.GraphicsQualityLevel = 1
UserGameSettings.MasterVolume = 0

for i, v in debug.getupvalue(Bypass("RouterClient").init, 4) do
	v.Name = i
end

if Player.PlayerGui.NewsApp.Enabled then
	local AbsPlay = Player.PlayerGui.NewsApp
		:WaitForChild("EnclosingFrame")
		:WaitForChild("MainFrame")
		:WaitForChild("Contents")
		:WaitForChild("PlayButton")
	clickGuiButton(AbsPlay)
	-- firesignal(AbsPlay.MouseButton1Click)
	NewsAppConnection:Disconnect()
end

if Player.PlayerGui.DialogApp.Dialog.ThemeColorDialog.Visible then
	if tutorialDebonce then
		return
	end
	tutorialDebonce = true
	local colorButton = Player.PlayerGui.DialogApp.Dialog.ThemeColorDialog
		:WaitForChild("Info")
		:WaitForChild("Response")
		:WaitForChild("ColorTemplate")
	local doneButton =
		Player.PlayerGui.DialogApp.Dialog.ThemeColorDialog:WaitForChild("Buttons"):WaitForChild("ButtonTemplate")
	if not colorButton then
		return
	end
	clickGuiButton(colorButton)
	clickGuiButton(doneButton)

	tutorialDebonce = false
	PickColorConn:Disconnect()
end


if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Visible then
	if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("ban") then
		FireButton("Okay")
		banMessageConnection:Disconnect()
	end
end


if Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Visible then
	firesignal(Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Baby.MouseButton1Click)
	RoleChooserDialogConnection:Disconnect()
end


if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Visible then
	if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("4.5%% Legendary") then
		FireButton("Okay")
	end
end


NewClaim()
task.wait()
NewTask()


for _, pettable in pairs({ pets_common, pets_uncommon, pets_rare, pets_ultrarare }) do
	for j, petlist in pairs(pettable) do
		table.insert(Pets_commonto_ultrarare, petlist)
	end
end


for _, pettable in pairs({ pets_legendary, pets_ultrarare, pets_rare, pets_uncommon, pets_common }) do
	for _, petlist in pairs(pettable) do
		table.insert(pets_legendary_to_common, petlist)
	end
end


buyLure()


-- "lures_2023_campfire_cookies"  "lures_2023_flame_swirl_pie"
baitId = findBait("fire_dimension_2024_burnt_bites_bait")


if baitId == nil then
	baitId = findBait("lures_2023_flame_swirl_pie")
	if baitId == nil then
		baitId = findBait("lures_2023_campfire_cookies")
	end
end


task.wait(1)
-- will place bait but it will also collect pet
placeBait(baitId)
task.wait(1)
placeBait(baitId)


game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/SetDoorLocked"):InvokeServer(true)


Bypass("RouterClient").get("TeamAPI/ChooseTeam"):InvokeServer("Babies", { ["dont_send_back_home"] = true })


if Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then
	for _, v in pairs(Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetDescendants()) do
		if v.Name == "TextLabel" then
			if v.Text == "No Thanks" then
				repeat
					clickGuiButton(v.Parent.Parent) -- no thanks button
				until not Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible
				DailyBoolean = false
				RobuxProductDialogConnection:Disconnect()
			end
		end
	end
end

task.wait(3)
startAutoFarm()


if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("Thanks for subscribing!") then
	FireButton("Okay")
end


if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match("You have been awarded") then
	FireButton("Awesome!")
end


WelcomeScreen:Disconnect()
-- RobuxProductDialogConnection:Disconnect()

-- loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/Barn.lua"))()
-- loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/BeetleTradeIn.lua"))()
-- loadstring(game:HttpGet("https://raw.githubusercontent.com/Arroz-con/ShittyHub/main/Modules/Sunshine.lua"))()

-- local tele = fluxus or codex or arceusx

-- tele.queue_on_teleport([[
-- 		repeat task.wait() until game:IsLoaded()
-- 		game:Shutdown()
-- 		]])

-- game:GetService("RunService"):Set3dRenderingEnabled(false)

local Window = Rayfield:CreateWindow({
	Name = "Rayfield Example Window",
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "by Sirius",
	ConfigurationSaving = {
		Enabled = false,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub",
	},
	Discord = {
		Enabled = false,
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
		RememberJoins = true, -- Set this to false to make them join the discord every time they load it up
	},
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided",
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = { "Hello" }, -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	},
})

-- Rayfield:Minimise()
TextButton.MouseButton1Click:Connect(function()
	if guiCooldown then
		return
	end

	guiCooldown = true
	Rayfield:Unhide()
	task.wait()
	guiCooldown = false
end)

-- Rayfield:Hide()

--[[ First Tab ]]
local FarmTab = Window:CreateTab("Misc", 4483362458)

FarmTab:CreateButton({
	Name = "Copy All Inventory to clipboard",
	Callback = function()
		Clipboard:CopyAllInventory()
	end,
})

FarmTab:CreateButton({
	Name = "Detailed Pet Inventory clipboard",
	Callback = function()
		Clipboard:CopyPetInfo()
	end,
})

-- local FarmToggle = FarmTab:CreateToggle({
--     Name = "Auto Farm",
--     CurrentValue = false,
--     Flag = "Toggle1",
--     Callback = function(Value)
--         getgenv().auto_farm = Value
--         autoFarm()
--     end,
-- })

-- FarmTab:CreateSection("1 Click = ALL Neon/Mega")
FarmTab:CreateButton({
	Name = "Make Neons",
	Callback = function()
		Fusion:MakeMega(false)
	end,
})

FarmTab:CreateButton({
	Name = "Make Megas",
	Callback = function()
		Fusion:MakeMega(true)
	end,
})

--[[ Auto Trade Tab ]]

local TradeTab = Window:CreateTab("Auto Trade", 4483362458)

TradeTab:CreateSection("only enable Auto Accept trade on alt getting the items")

getgenv().AutoTradeToggle = TradeTab:CreateToggle({
	Name = "Auto Accept Trade",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_accept_trade = Value
		while getgenv().auto_accept_trade do
			Trade:AutoAcceptTrade()
			ClickTradeWindowPopUps()
			task.wait(1)
		end
	end,
})

-- dont forget to add a refresh when players join game
local playerDropdown = TradeTab:CreateDropdown({
	Name = "Select a player",
	Options = getPlayersInGame(),
	CurrentOption = { "" },
	MultipleOptions = false,
	Flag = "Dropdown1",
	Callback = function(Option)
		selectedPlayer = Players[Option[1]]
	end,
})

-- TradeTab:CreateToggle({
--     Name = "Semi-Auto Trade (manually choose items)",
--     CurrentValue = false,
--     Flag = "Toggle1",
--     Callback = function(Value)
--         getgenv().auto_trade_semi_auto = Value

--     end,
-- })

TradeAllInventory = TradeTab:CreateToggle({
	Name = "Auto Trade EVERYTHING",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_all_inventory = Value
		while getgenv().auto_trade_all_inventory do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:AllInventory("pets")
			Trade:AllInventory("pet_accessories") -- pet wear and wings
			Trade:AllInventory("strollers")
			Trade:AllInventory("food")
			Trade:AllInventory("transport") -- vehicle
			Trade:AllInventory("toys")
			Trade:AllInventory("gifts")
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				TradeAllInventory:Set(false)
			end
			task.wait()
		end
	end,
})

AllPetsToggle = TradeTab:CreateToggle({
	Name = "Auto Trade All Pets",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_all_pets = Value
		while getgenv().auto_trade_all_pets do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:AllPets()
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				AllPetsToggle:Set(false)
			end
			task.wait()
		end
	end,
})

LegendaryToggle = TradeTab:CreateToggle({
	Name = "Auto Trade Only Legendary's",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_Legendary = Value
		while getgenv().auto_trade_Legendary do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:AllPetsOfSameRarity("legendary")
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				LegendaryToggle:Set(false)
			end
			task.wait()
		end
	end,
})

FullgrownToggle = TradeTab:CreateToggle({
	Name = "Auto Trade FullGrown, luminous Neons and Megas",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_fullgrown_neon_and_mega = Value
		while getgenv().auto_trade_fullgrown_neon_and_mega do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:Fullgrown()
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				FullgrownToggle:Set(false)
			end
			task.wait()
		end
	end,
})

-- (pet.properties.age == 6 or pet.properties.neon) or pet.properties.mega_neon
TradeAllMegas = TradeTab:CreateToggle({
	Name = "Auto Trade All Megas",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_all_neons = Value
		while getgenv().auto_trade_all_neons do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:AllNeons("mega_neon")
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				TradeAllMegas:Set(false)
			end
			task.wait()
		end
	end,
})

TradeAllNeons = TradeTab:CreateToggle({
	Name = "Auto Trade All Neons",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_all_neons = Value
		while getgenv().auto_trade_all_neons do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:AllNeons("neon")
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				TradeAllNeons:Set(false)
			end
			task.wait()
		end
	end,
})

LowTierToggle = TradeTab:CreateToggle({
	Name = "Auto Trade Common to Ultra-rare and Newborn to Post-Teen",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_lowtier_pets = Value
		while getgenv().auto_trade_lowtier_pets do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:LowTiers()
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				LowTierToggle:Set(false)
			end
			task.wait()
		end
	end,
})

TradeTab:CreateSection("Send Custom Pet, sends ALL ages of selected pet")

local PetsDropdown = TradeTab:CreateDropdown({
	Name = "Select a Pet",
	Options = petsTable,
	CurrentOption = { petsTable[1] },
	MultipleOptions = false,
	Flag = "Dropdown1",
	Callback = function(Option)
		selectedItem = Option[1]
	end,
})

SelectedPet = TradeTab:CreateToggle({
	Name = "Auto Trade Selected Pet",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_custom = Value
		while getgenv().auto_trade_custom do
			Trade:SendTradeRequest(selectedPlayer)

			Trade:SelectTabAndTrade("pets", selectedItem)

			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				SelectedPet:Set(false)
			end
			task.wait()
		end
	end,
})

local GiftsDropdown = TradeTab:CreateDropdown({
	Name = "Select gift",
	Options = giftsTable,
	CurrentOption = { giftsTable[1] },
	MultipleOptions = false,
	Flag = "Dropdown1",
	Callback = function(Option)
		selectedItem = Option[1]
	end,
})

GiftToggle = TradeTab:CreateToggle({
	Name = "Auto Trade Custom Gift",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_custom = Value
		while getgenv().auto_trade_custom do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:SelectTabAndTrade("gifts", selectedItem)
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				GiftToggle:Set(false)
			end
			task.wait()
		end
	end,
})

-- TradeTab:CreateSection("Send Toys")

local ToysDropdown = TradeTab:CreateDropdown({
	Name = "Select toys",
	Options = toysTable,
	CurrentOption = { toysTable[1] }, -- need to change to toys table
	MultipleOptions = false,
	Flag = "Dropdown1",
	Callback = function(Option)
		selectedItem = Option[1]
	end,
})

ToyToggle = TradeTab:CreateToggle({
	Name = "Auto Trade Custom Toy",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_custom = Value
		while getgenv().auto_trade_custom do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:SelectTabAndTrade("toys", selectedItem)
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				ToyToggle:Set(false)
			end
			task.wait()
		end
	end,
})

local ToysDropdown = TradeTab:CreateDropdown({
	Name = "Select food",
	Options = foodTable,
	CurrentOption = { foodTable[1] }, -- need to change to food table
	MultipleOptions = false,
	Flag = "Dropdown1",
	Callback = function(Option)
		selectedItem = Option[1]
		-- refreshInventory("food", ToysDropdown)
	end,
})

FoodToggle = TradeTab:CreateToggle({
	Name = "Auto Trade Custom Food",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().auto_trade_custom = Value
		while getgenv().auto_trade_custom do
			Trade:SendTradeRequest(selectedPlayer)
			Trade:SelectTabAndTrade("food", selectedItem)
			local hasPets = Trade:AcceptNegotiationAndConfirm()
			if not hasPets then
				FoodToggle:Set(false)
			end
			task.wait()
		end
	end,
})

--[[ things needed when joining game for the first time ]]

local NewAltTab = Window:CreateTab("New Alts", 4483362458)

NewAltTab:CreateButton({
	Name = "Complete Starter Tutorial",
	Callback = function()
		completeStarterTutorial()
	end,
})

NewAltTab:CreateButton({
	Name = "Get Trade License",
	Callback = function()
		getTradeLicense()
	end,
})

NewAltTab:CreateButton({
	Name = "Buy Basic Crib",
	Callback = function()
		buyCrib()
	end,
})

--[[ AGE UP POTIONS TAB ]]

local AgeUpPotionTab = Window:CreateTab("Age Potion", 4483362458)

local PetsDropdown3 = AgeUpPotionTab:CreateDropdown({
	Name = "Select a Pet",
	Options = petsTable,
	CurrentOption = { "" }, -- need to change to food table
	MultipleOptions = false,
	Flag = "Dropdown1",
	Callback = function(Option)
		selectedItem = Option[1]
	end,
})

-- AgeUpPotion:AddButton({
--     Name = "Refresh Pet List",
--     Callback = function()
--         refreshInventory("pets", PetsDropdown3)
--     end
-- })

getgenv().PotionToggle = AgeUpPotionTab:CreateToggle({
	Name = "Click to Age up Pet",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		getgenv().feedAgeUpPotionToggle = Value
		AgeUpPotionLevelUp()
	end,
})

-- local function refreshInventory(tab: string, dropDownName: string)
--     local petOptions = {}
--     local petTable = {}
--     local addedNames = {}
--     for _, value in Bypass("ClientData").get_data()[Player.Name].inventory[tab] do
--         if value and not addedNames[value.id] then
--             if not petTable[value.id] then
--                 petTable[value.id] = {}
--             end
--             table.insert(petTable[value.id], value.id)
--             addedNames[value.id] = true
--         end
--     end
--     for name, ids in pairs(petTable) do
--         table.insert(petOptions, name)
--     end
--     table.sort(petOptions)
--     dropDownName:Refresh(petOptions, true)
-- end

if Players.LocalPlayer.Name == SETTINGS.TRADE_COLLECTOR_NAME and SETTINGS.ENABLE_TRADE_COLLECTOR == true then
	getgenv().AutoTradeToggle:Set(true)
	task.wait(1)
end